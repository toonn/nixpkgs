From 1d9f45da67e6b027ee2a20c491fbec01ef6f48bc Mon Sep 17 00:00:00 2001
From: toonn <toonn@toonn.io>
Date: Mon, 23 Aug 2021 15:12:44 +0200
Subject: [PATCH] Use modern API_AVAILABLE/DEPRECATED

The newer macros require a deprecation message and this wasn't always
included in the old ones. In such cases we use the "deprecated"
placeholder.
---
 .../lib/AuthorizationPlugin.h                 |  6 +--
 OSX/libsecurity_cms/lib/CMSDecoder.h          |  3 +-
 OSX/libsecurity_keychain/lib/SecKeychain.h    |  4 +-
 OSX/libsecurity_ssl/lib/SecureTransport.h     | 20 +++++-----
 OSX/sec/Security/SecServerEncryptionSupport.h |  6 +--
 libsecurity_smime/lib/CMSDecoder.h            | 28 +++++++-------
 libsecurity_smime/lib/CMSEncoder.h            | 38 +++++++++----------
 trust/SecCertificate.h                        |  6 +--
 trust/SecCertificatePriv.h                    | 10 ++---
 trust/SecPolicyPriv.h                         | 10 ++---
 trust/SecTrust.h                              |  4 +-
 trust/SecTrustSettingsPriv.h                  |  2 +-
 12 files changed, 68 insertions(+), 69 deletions(-)

diff --git a/OSX/libsecurity_authorization/lib/AuthorizationPlugin.h b/OSX/libsecurity_authorization/lib/AuthorizationPlugin.h
index baed696..5b9f2dc 100644
--- a/OSX/libsecurity_authorization/lib/AuthorizationPlugin.h
+++ b/OSX/libsecurity_authorization/lib/AuthorizationPlugin.h
@@ -255,7 +255,7 @@ typedef struct AuthorizationCallbacks {
 	 userful for kSecUseAuthenticationContext for SecItem calls.
      Caller is responsible for outValue release	 */
     OSStatus (*GetLAContext)(AuthorizationEngineRef inEngine,
-        CFTypeRef __nullable * __nullable outValue) __OSX_AVAILABLE_STARTING(__MAC_10_13, __PHONE_NA);
+        CFTypeRef __nullable * __nullable outValue) API_AVAILABLE(macos(10.13), ios(NA));
 
     /*
 	 Available only on systems with callback version 2 or higher
@@ -265,14 +265,14 @@ typedef struct AuthorizationCallbacks {
      Caller is responsible for outValue release */
     OSStatus (*GetTokenIdentities)(AuthorizationEngineRef inEngine,
         CFTypeRef context,
-        CFArrayRef __nullable * __nullable outValue) __OSX_AVAILABLE_STARTING(__MAC_10_13, __PHONE_NA);
+        CFArrayRef __nullable * __nullable outValue) API_AVAILABLE(macos(10.13), ios(NA));
 
     /*
      Available only on systems with callback version 3 or higher
      Constructs TKTokenWatcher object.
      Caller is responsible for outValue release     */
     OSStatus (*GetTKTokenWatcher)(AuthorizationEngineRef inEngine,
-        CFTypeRef __nullable * __nullable outValue)  __OSX_AVAILABLE_STARTING(__MAC_10_13_4, __PHONE_NA);
+        CFTypeRef __nullable * __nullable outValue)  API_AVAILABLE(macos(10.13.4), ios(NA));
 
 } AuthorizationCallbacks;
 
diff --git a/OSX/libsecurity_cms/lib/CMSDecoder.h b/OSX/libsecurity_cms/lib/CMSDecoder.h
index f0357bd..f5de3b4 100644
--- a/OSX/libsecurity_cms/lib/CMSDecoder.h
+++ b/OSX/libsecurity_cms/lib/CMSDecoder.h
@@ -127,8 +127,7 @@ OSStatus CMSDecoderCopyDetachedContent(
 OSStatus CMSDecoderSetSearchKeychain(
 	CMSDecoderRef		cmsDecoder,
 	CFTypeRef			keychainOrArray)
-    __OSX_AVAILABLE_BUT_DEPRECATED_MSG(__MAC_10_5, __MAC_10_13, __IPHONE_NA, __IPHONE_NA,
-                                       "To change the search keychains call SecKeychainSetSearchList.");
+    API_DEPRECATED("To change the search keychains call SecKeychainSetSearchList.", macos(10.5,10.13), ios(NA,NA));
 
 /*
  * Obtain the number of signers of a message. A result of zero indicates that
diff --git a/OSX/libsecurity_keychain/lib/SecKeychain.h b/OSX/libsecurity_keychain/lib/SecKeychain.h
index 1a2d3fd..78ba986 100644
--- a/OSX/libsecurity_keychain/lib/SecKeychain.h
+++ b/OSX/libsecurity_keychain/lib/SecKeychain.h
@@ -607,7 +607,7 @@ OSStatus SecKeychainGetDLDBHandle(SecKeychainRef __nullable keychain, CSSM_DL_DB
     @result A result code.  See "Security Error Codes" (SecBase.h).
 */
 OSStatus SecKeychainCopyAccess(SecKeychainRef __nullable keychain, SecAccessRef * __nonnull CF_RETURNS_RETAINED access)
-	__OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_13, __IPHONE_NA, __IPHONE_NA);
+	API_DEPRECATED("deprecated", macos(10.2,10.13), ios(NA,NA));
 
 /*!
 	@function SecKeychainSetAccess
@@ -617,7 +617,7 @@ OSStatus SecKeychainCopyAccess(SecKeychainRef __nullable keychain, SecAccessRef
     @result A result code.  See "Security Error Codes" (SecBase.h).
 */
 OSStatus SecKeychainSetAccess(SecKeychainRef __nullable keychain, SecAccessRef access)
-	__OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_13, __IPHONE_NA, __IPHONE_NA);
+	API_DEPRECATED("deprecated", macos(10.2,10.13), ios(NA,NA));
 
 CF_ASSUME_NONNULL_END
 
diff --git a/OSX/libsecurity_ssl/lib/SecureTransport.h b/OSX/libsecurity_ssl/lib/SecureTransport.h
index f884dee..042bacf 100644
--- a/OSX/libsecurity_ssl/lib/SecureTransport.h
+++ b/OSX/libsecurity_ssl/lib/SecureTransport.h
@@ -337,7 +337,7 @@ typedef CF_ENUM(int, SSLConnectionType)
 
 /* Default configuration (has 3DES, no RC4) */
 extern const CFStringRef kSSLSessionConfig_default
-__OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2,__MAC_10_13,__IPHONE_5_0,__IPHONE_11_0);
+API_DEPRECATED("deprecated", macos(10.2,10.13), ios(5.0,11.0));
 
 /* ATS v1 Config: TLS v1.2, only PFS ciphersuites */
 extern const CFStringRef kSSLSessionConfig_ATSv1
@@ -353,7 +353,7 @@ __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_5_0);
 
 /* TLS v1.2 to TLS v1.0, with default ciphersuites + RC4 + 3DES */
 extern const CFStringRef kSSLSessionConfig_RC4_fallback
-__OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2,__MAC_10_13,__IPHONE_5_0,__IPHONE_11_0);
+API_DEPRECATED("deprecated", macos(10.2,10.13), ios(5.0,11.0));
 
 /* TLS v1.0 only, with default ciphersuites + fallback SCSV */
 extern const CFStringRef kSSLSessionConfig_TLSv1_fallback
@@ -361,7 +361,7 @@ __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_5_0);
 
 /* TLS v1.0, with default ciphersuites + RC4 + 3DES + fallback SCSV */
 extern const CFStringRef kSSLSessionConfig_TLSv1_RC4_fallback
-__OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2,__MAC_10_13,__IPHONE_5_0,__IPHONE_11_0);
+API_DEPRECATED("deprecated", macos(10.2,10.13), ios(5.0,11.0));
 
 /* TLS v1.2 to TLS v1.0, defaults + RC4 + DHE ciphersuites */
 extern const CFStringRef kSSLSessionConfig_legacy
@@ -377,11 +377,11 @@ __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_5_0);
 
 /* TLS v1.2 to TLS v1.0, has 3DES, no RC4 */
 extern const CFStringRef kSSLSessionConfig_3DES_fallback
-__OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2,__MAC_10_13,__IPHONE_5_0,__IPHONE_11_0);
+API_DEPRECATED("deprecated", macos(10.2,10.13), ios(5.0,11.0));
 
 /* TLS v1.0, with default ciphersuites + 3DES, no RC4 */
 extern const CFStringRef kSSLSessionConfig_TLSv1_3DES_fallback
-__OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2,__MAC_10_13,__IPHONE_5_0,__IPHONE_11_0);
+API_DEPRECATED("deprecated", macos(10.2,10.13), ios(5.0,11.0));
 
 
 /******************
@@ -837,7 +837,7 @@ SSLGetEnabledCiphers		(SSLContextRef			context,
 OSStatus
 SSLSetSessionTicketsEnabled     (SSLContextRef          context,
                                  Boolean                enabled)
-    __OSX_AVAILABLE_STARTING(__MAC_10_13, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.13), ios(11.0));
 
 
 #if (TARGET_OS_MAC && !(TARGET_OS_EMBEDDED || TARGET_OS_IPHONE))
@@ -1208,7 +1208,7 @@ SSLGetNegotiatedCipher		(SSLContextRef 		context,
 OSStatus
 SSLSetALPNProtocols         (SSLContextRef      context,
                              CFArrayRef         protocols)
-    __OSX_AVAILABLE_STARTING(__MAC_10_13, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.13), ios(11.0));
 
 /*
  * Get the ALPN protocols associated with this SSL context.
@@ -1226,7 +1226,7 @@ SSLSetALPNProtocols         (SSLContextRef      context,
 OSStatus
 SSLCopyALPNProtocols        (SSLContextRef      context,
                              CFArrayRef         __nullable * __nonnull protocols)           /* RETURNED */
-    __OSX_AVAILABLE_STARTING(__MAC_10_13, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.13), ios(11.0));
 
 /*
  * Set the OCSP response for the given SSL session.
@@ -1237,7 +1237,7 @@ SSLCopyALPNProtocols        (SSLContextRef      context,
 OSStatus
 SSLSetOCSPResponse          (SSLContextRef      context,
                              CFDataRef          __nonnull response)
-__OSX_AVAILABLE_STARTING(__MAC_10_13, __IPHONE_11_0);
+API_AVAILABLE(macos(10.13), ios(11.0));
 
 /********************************************************
  *** Session context configuration, server side only. ***
@@ -1518,7 +1518,7 @@ SSLClose					(SSLContextRef		context)
 OSStatus
 SSLSetError                 (SSLContextRef      context,
                              OSStatus           status)
-    __OSX_AVAILABLE_STARTING(__MAC_10_13, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.13), ios(11.0));
 
 CF_IMPLICIT_BRIDGING_DISABLED
 CF_ASSUME_NONNULL_END
diff --git a/OSX/sec/Security/SecServerEncryptionSupport.h b/OSX/sec/Security/SecServerEncryptionSupport.h
index 4f12bae..1a98096 100644
--- a/OSX/sec/Security/SecServerEncryptionSupport.h
+++ b/OSX/sec/Security/SecServerEncryptionSupport.h
@@ -17,18 +17,18 @@
 // deprecated for the same reason (28496795).
 
 CFDataRef SecCopyEncryptedToServer(SecTrustRef trustedEvaluation, CFDataRef dataToEncrypt, CFErrorRef *error)
-    __OSX_AVAILABLE_BUT_DEPRECATED_MSG(__MAC_10_12, __MAC_10_13, __IPHONE_8_0, __IPHONE_11_0, "Migrate to SecKeyCreateEncryptedData with kSecKeyAlgorithmECIESEncryptionStandardVariableIV* or Security Foundation SFIESOperation for improved security (encryption is not compatible)");
+    API_DEPRECATED("Migrate to SecKeyCreateEncryptedData with kSecKeyAlgorithmECIESEncryptionStandardVariableIV* or Security Foundation SFIESOperation for improved security (encryption is not compatible)", macos(10.12,10.13), ios(8.0,11.0));
 
 //
 // For testing
 //
 /* Caution: These functions take an iOS SecKeyRef. Careful use is required on OS X. */
 CFDataRef SecCopyDecryptedForServer(SecKeyRef serverFullKey, CFDataRef encryptedData, CFErrorRef* error)
-    __OSX_AVAILABLE_BUT_DEPRECATED_MSG(__MAC_NA, __MAC_NA, __IPHONE_8_0, __IPHONE_11_0,"Migrate to SecKeyCreateEncryptedData with kSecKeyAlgorithmECIESEncryptionStandardVariableIV* or Security Foundation SFIESOperation for improved security (encryption is not compatible)");
+    API_DEPRECATED("Migrate to SecKeyCreateEncryptedData with kSecKeyAlgorithmECIESEncryptionStandardVariableIV* or Security Foundation SFIESOperation for improved security (encryption is not compatible)", macos(NA,NA), ios(8.0,11.0));
 // SFIESCiphertext
 
 
 CFDataRef SecCopyEncryptedToServerKey(SecKeyRef publicKey, CFDataRef dataToEncrypt, CFErrorRef *error)
-    __OSX_AVAILABLE_BUT_DEPRECATED_MSG(__MAC_10_12, __MAC_10_13, __IPHONE_8_0, __IPHONE_11_0,"Migrate to SecKeyCreateEncryptedData with kSecKeyAlgorithmECIESEncryptionStandardVariableIV* or Security Foundation SFIESOperation for improved security (encryption is not compatible)");
+    API_DEPRECATED("Migrate to SecKeyCreateEncryptedData with kSecKeyAlgorithmECIESEncryptionStandardVariableIV* or Security Foundation SFIESOperation for improved security (encryption is not compatible)", macos(10.12,10.13), ios(8.0,11.0));
 
 #endif
diff --git a/libsecurity_smime/lib/CMSDecoder.h b/libsecurity_smime/lib/CMSDecoder.h
index 7b75440..9f2a6a0 100644
--- a/libsecurity_smime/lib/CMSDecoder.h
+++ b/libsecurity_smime/lib/CMSDecoder.h
@@ -70,7 +70,7 @@ typedef CF_ENUM(int32_t, CMSSignerStatus) {
  * Create a CMSDecoder. Result must eventually be freed via CFRelease().
  */
 OSStatus CMSDecoderCreate(CMSDecoderRef * __nonnull CF_RETURNS_RETAINED cmsDecoderOut)	/* RETURNED */
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * Feed raw bytes of the message to be decoded into the decoder. Can be called
@@ -82,7 +82,7 @@ OSStatus CMSDecoderUpdateMessage(
     CMSDecoderRef		cmsDecoder,
     const void			*msgBytes,
     size_t				msgBytesLen)
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * Indicate that no more CMSDecoderUpdateMessage() calls are forthcoming;
@@ -91,7 +91,7 @@ OSStatus CMSDecoderUpdateMessage(
  * message.
  */
 OSStatus CMSDecoderFinalizeMessage(CMSDecoderRef cmsDecoder)
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * A signed CMS message optionally includes the data which was signed. If the
@@ -107,7 +107,7 @@ OSStatus CMSDecoderFinalizeMessage(CMSDecoderRef cmsDecoder)
 OSStatus CMSDecoderSetDetachedContent(
     CMSDecoderRef		cmsDecoder,
     CFDataRef			detachedContent)
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * Obtain the detached content specified in CMSDecoderSetDetachedContent().
@@ -117,7 +117,7 @@ OSStatus CMSDecoderSetDetachedContent(
 OSStatus CMSDecoderCopyDetachedContent(
     CMSDecoderRef		cmsDecoder,
     CFDataRef * __nonnull CF_RETURNS_RETAINED detachedContentOut)	/* RETURNED */
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * Obtain the number of signers of a message. A result of zero indicates that
@@ -127,7 +127,7 @@ OSStatus CMSDecoderCopyDetachedContent(
 OSStatus CMSDecoderGetNumSigners(
     CMSDecoderRef		cmsDecoder,
     size_t				*numSignersOut)	/* RETURNED */
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * Obtain the status of a CMS message's signature. A CMS message can
@@ -211,7 +211,7 @@ OSStatus CMSDecoderCopySignerStatus(
     CMSSignerStatus * __nullable signerStatusOut,               /* optional; RETURNED */
     SecTrustRef * __nullable CF_RETURNS_RETAINED secTrustOut,   /* optional; RETURNED */
     OSStatus * __nullable certVerifyResultCodeOut)              /* optional; RETURNED */
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * Obtain the email address of signer 'signerIndex' of a CMS message, if
@@ -226,7 +226,7 @@ OSStatus CMSDecoderCopySignerEmailAddress(
     CMSDecoderRef		cmsDecoder,
     size_t				signerIndex,
     CFStringRef	* __nonnull CF_RETURNS_RETAINED signerEmailAddressOut)	/* RETURNED */
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * Obtain the certificate of signer 'signerIndex' of a CMS message, if
@@ -241,7 +241,7 @@ OSStatus CMSDecoderCopySignerCert(
     CMSDecoderRef		cmsDecoder,
     size_t				signerIndex,
     SecCertificateRef * __nonnull CF_RETURNS_RETAINED signerCertOut)    /* RETURNED */
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * Determine whether a CMS message was encrypted. Returns TRUE if so, FALSE if not.
@@ -253,7 +253,7 @@ OSStatus CMSDecoderCopySignerCert(
 OSStatus CMSDecoderIsContentEncrypted(
     CMSDecoderRef		cmsDecoder,
     Boolean				*isEncryptedOut)
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * Obtain the eContentType OID for a SignedData's EncapsulatedContentType, if
@@ -265,7 +265,7 @@ OSStatus CMSDecoderIsContentEncrypted(
 OSStatus CMSDecoderCopyEncapsulatedContentType(
    CMSDecoderRef		cmsDecoder,
    CFDataRef * __nonnull CF_RETURNS_RETAINED eContentTypeOut)  /* RETURNED */
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * Obtain an array of all of the certificates in a message. Elements of the
@@ -278,7 +278,7 @@ OSStatus CMSDecoderCopyEncapsulatedContentType(
 OSStatus CMSDecoderCopyAllCerts(
     CMSDecoderRef		cmsDecoder,
     CFArrayRef * __nonnull CF_RETURNS_RETAINED certsOut)    /* RETURNED */
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * Obtain the actual message content (payload), if any. If the message was
@@ -289,7 +289,7 @@ OSStatus CMSDecoderCopyAllCerts(
 OSStatus CMSDecoderCopyContent(
     CMSDecoderRef		cmsDecoder,
     CFDataRef * __nonnull CF_RETURNS_RETAINED contentOut)	/* RETURNED */
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * Obtain the signing time of signer 'signerIndex' of a CMS message, if
@@ -305,7 +305,7 @@ OSStatus CMSDecoderCopySignerSigningTime(
     CMSDecoderRef		cmsDecoder,
     size_t				signerIndex,
     CFAbsoluteTime      *signingTime)			/* RETURNED */
-    __OSX_AVAILABLE_STARTING(__MAC_10_8, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.8), ios(11.0));
 
 #if TIMESTAMPING_SUPPORTED
 /*
diff --git a/libsecurity_smime/lib/CMSEncoder.h b/libsecurity_smime/lib/CMSEncoder.h
index e548c56..d6860f5 100644
--- a/libsecurity_smime/lib/CMSEncoder.h
+++ b/libsecurity_smime/lib/CMSEncoder.h
@@ -60,13 +60,13 @@ CF_ASSUME_NONNULL_BEGIN
 typedef struct CF_BRIDGED_TYPE(id) _CMSEncoder *CMSEncoderRef;
 
 CFTypeID CMSEncoderGetTypeID(void)
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * Create a CMSEncoder. Result must eventually be freed via CFRelease().
  */
 OSStatus CMSEncoderCreate(CMSEncoderRef * __nonnull CF_RETURNS_RETAINED cmsEncoderOut)	/* RETURNED */
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 extern const CFStringRef kCMSEncoderDigestAlgorithmSHA1;
 extern const CFStringRef kCMSEncoderDigestAlgorithmSHA256;
@@ -74,7 +74,7 @@ extern const CFStringRef kCMSEncoderDigestAlgorithmSHA256;
 OSStatus CMSEncoderSetSignerAlgorithm(
     CMSEncoderRef		cmsEncoder,
     CFStringRef		digestAlgorithm)
-    __OSX_AVAILABLE_STARTING(__MAC_10_11, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.11), ios(11.0));
 
 /*
  * Specify signers of the CMS message; implies that the message will be signed.
@@ -89,7 +89,7 @@ OSStatus CMSEncoderSetSignerAlgorithm(
 OSStatus CMSEncoderAddSigners(
     CMSEncoderRef		cmsEncoder,
     CFTypeRef			signerOrArray)
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * Obtain an array of signers as specified in CMSEncoderSetSigners().
@@ -99,7 +99,7 @@ OSStatus CMSEncoderAddSigners(
 OSStatus CMSEncoderCopySigners(
     CMSEncoderRef		cmsEncoder,
     CFArrayRef * __nonnull CF_RETURNS_RETAINED signersOut)		/* RETURNED */
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * Specify recipients of the message. Implies that the message will
@@ -115,7 +115,7 @@ OSStatus CMSEncoderCopySigners(
 OSStatus CMSEncoderAddRecipients(
     CMSEncoderRef		cmsEncoder,
     CFTypeRef			recipientOrArray)
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * Obtain an array of recipients as specified in CMSEncoderSetRecipients().
@@ -126,7 +126,7 @@ OSStatus CMSEncoderAddRecipients(
 OSStatus CMSEncoderCopyRecipients(
     CMSEncoderRef		cmsEncoder,
     CFArrayRef * __nonnull CF_RETURNS_RETAINED recipientsOut)	/* RETURNED */
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * A signed message optionally includes the data to be signed. If the message
@@ -142,7 +142,7 @@ OSStatus CMSEncoderCopyRecipients(
 OSStatus CMSEncoderSetHasDetachedContent(
     CMSEncoderRef		cmsEncoder,
     Boolean			detachedContent)
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * Obtain a Boolean indicating whether the current message will have detached
@@ -153,7 +153,7 @@ OSStatus CMSEncoderSetHasDetachedContent(
 OSStatus CMSEncoderGetHasDetachedContent(
     CMSEncoderRef		cmsEncoder,
     Boolean			*detachedContentOut)	/* RETURNED */
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * Optionally specify an eContentType OID for the inner EncapsulatedData for
@@ -170,7 +170,7 @@ OSStatus CMSEncoderGetHasDetachedContent(
 OSStatus CMSEncoderSetEncapsulatedContentTypeOID(
     CMSEncoderRef		cmsEncoder,
     CFTypeRef			eContentTypeOID)
-    __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.7), ios(11.0));
 
 /*
  * Obtain the eContentType OID specified in CMSEncoderSetEncapsulatedContentType().
@@ -183,7 +183,7 @@ OSStatus CMSEncoderSetEncapsulatedContentTypeOID(
 OSStatus CMSEncoderCopyEncapsulatedContentType(
     CMSEncoderRef		cmsEncoder,
     CFDataRef * __nonnull CF_RETURNS_RETAINED eContentTypeOut)		/* RETURNED */
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * Signed CMS messages can contain arbitrary sets of certificates beyond those
@@ -208,7 +208,7 @@ OSStatus CMSEncoderCopyEncapsulatedContentType(
 OSStatus CMSEncoderAddSupportingCerts(
     CMSEncoderRef		cmsEncoder,
     CFTypeRef			certOrArray)
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * Obtain the SecCertificates provided in CMSEncoderAddSupportingCerts().
@@ -219,7 +219,7 @@ OSStatus CMSEncoderAddSupportingCerts(
 OSStatus CMSEncoderCopySupportingCerts(
     CMSEncoderRef		cmsEncoder,
     CFArrayRef * __nonnull CF_RETURNS_RETAINED certsOut)			/* RETURNED */
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * Standard signed attributes, optionally specified in
@@ -260,7 +260,7 @@ typedef CF_OPTIONS(uint32_t, CMSSignedAttributes) {
 OSStatus CMSEncoderAddSignedAttributes(
     CMSEncoderRef		cmsEncoder,
     CMSSignedAttributes	signedAttributes)
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * Specification of what certificates to include in a signed message.
@@ -285,7 +285,7 @@ typedef CF_ENUM(uint32_t, CMSCertificateChainMode) {
 OSStatus CMSEncoderSetCertificateChainMode(
     CMSEncoderRef			cmsEncoder,
     CMSCertificateChainMode	chainMode)
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * Obtain indication of which signer certs are to be included
@@ -294,7 +294,7 @@ OSStatus CMSEncoderSetCertificateChainMode(
 OSStatus CMSEncoderGetCertificateChainMode(
     CMSEncoderRef			cmsEncoder,
     CMSCertificateChainMode	*chainModeOut)
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * Feed content bytes into the encoder.
@@ -305,7 +305,7 @@ OSStatus CMSEncoderUpdateContent(
     CMSEncoderRef		cmsEncoder,
     const void			*content,
     size_t				contentLen)
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * Finish encoding the message and obtain the encoded result.
@@ -314,7 +314,7 @@ OSStatus CMSEncoderUpdateContent(
 OSStatus CMSEncoderCopyEncodedContent(
     CMSEncoderRef		cmsEncoder,
     CFDataRef * __nonnull CF_RETURNS_RETAINED encodedContentOut)	/* RETURNED */
-    __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.5), ios(11.0));
 
 /*
  * High-level, one-shot encoder function.
@@ -346,7 +346,7 @@ OSStatus CMSEncodeContent(
     const void              *content,
     size_t                  contentLen,
     CFDataRef * __nullable CF_RETURNS_RETAINED encodedContentOut)	/* RETURNED */
-    __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.7), ios(11.0));
 
 #if TIMESTAMPING_SUPOORTED
 OSStatus CMSEncoderCopySignerTimestamp(
diff --git a/trust/SecCertificate.h b/trust/SecCertificate.h
index d3c1971..5e6da77 100644
--- a/trust/SecCertificate.h
+++ b/trust/SecCertificate.h
@@ -178,7 +178,7 @@ OSStatus SecCertificateCopyPublicKey(SecCertificateRef certificate, SecKeyRef *
  */
 __nullable
 CFDataRef SecCertificateCopySerialNumberData(SecCertificateRef certificate, CFErrorRef *error)
-    __OSX_AVAILABLE_STARTING(__MAC_10_13, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.13), ios(11.0));
 
 #if TARGET_OS_IPHONE
 /*!
@@ -189,7 +189,7 @@ CFDataRef SecCertificateCopySerialNumberData(SecCertificateRef certificate, CFEr
  */
 __nullable
 CFDataRef SecCertificateCopySerialNumber(SecCertificateRef certificate)
-    __OSX_AVAILABLE_BUT_DEPRECATED_MSG(__MAC_NA, __MAC_NA, __IPHONE_10_3, __IPHONE_11_0, "SecCertificateCopySerialNumber is deprecated. Use SecCertificateCopySerialNumberData instead.");
+    API_DEPRECATED("SecCertificateCopySerialNumber is deprecated. Use SecCertificateCopySerialNumberData instead.", mac(NA,NA), ios(10.3,11.0));
 #endif
 
 #if TARGET_OS_OSX
@@ -202,7 +202,7 @@ CFDataRef SecCertificateCopySerialNumber(SecCertificateRef certificate)
  */
 __nullable
 CFDataRef SecCertificateCopySerialNumber(SecCertificateRef certificate, CFErrorRef *error)
-    __OSX_AVAILABLE_BUT_DEPRECATED_MSG(__MAC_10_7, __MAC_10_13, __IPHONE_NA, __IPHONE_NA, "SecCertificateCopySerialNumber is deprecated. Use SecCertificateCopySerialNumberData instead.");
+    API_DEPRECATED("SecCertificateCopySerialNumber is deprecated. Use SecCertificateCopySerialNumberData instead.", macos(10.7,10.13), ios(NA,NA));
 #endif
 
 /*
diff --git a/trust/SecCertificatePriv.h b/trust/SecCertificatePriv.h
index a874f61..48c00ba 100644
--- a/trust/SecCertificatePriv.h
+++ b/trust/SecCertificatePriv.h
@@ -377,17 +377,17 @@ SeciAuthVersion SecCertificateGetiAuthVersion(SecCertificateRef certificate)
 
 /* Return the normalized name or NULL if it fails to parse */
 CFDataRef SecDistinguishedNameCopyNormalizedSequence(CFDataRef distinguished_name)
-    __OSX_AVAILABLE_STARTING(__MAC_10_13, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.13), ios(11.0));
 
 /* Returns the Subject Key ID extension from the certificate or NULL if none */
 CFDataRef SecCertificateGetSubjectKeyID(SecCertificateRef certificate)
-    __OSX_AVAILABLE_STARTING(__MAC_10_13, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.13), ios(11.0));
 
 /* Returns an array of SecCertificateRefs containing the iPhone Device CA and
  * its parent certificates. This interface is meant as a workaround and should
  * not be used without consulting the Security team. */
 CFArrayRef SecCertificateCopyiPhoneDeviceCAChain(void)
-    __OSX_AVAILABLE_STARTING(__MAC_10_13, __IPHONE_11_0);
+    API_AVAILABLE(macos(10.13), ios(11.0));
 
 
 /*!
@@ -405,7 +405,7 @@ CFArrayRef SecCertificateCopyiPhoneDeviceCAChain(void)
 CF_RETURNS_RETAINED
 CFDataRef SecCertificateCopyExtensionValue(SecCertificateRef certificate,
                                            CFTypeRef extensionOID, bool *isCritical)
-    __OSX_AVAILABLE_STARTING(__MAC_10_13_4, __IPHONE_11_3);
+    API_AVAILABLE(macos(10.13.4), ios(11.3));
 
 /* Return a (modern) SecKeyRef for the public key embedded in the cert. */
 #if TARGET_OS_OSX
@@ -578,7 +578,7 @@ bool SecCertificateIsValidX(SecCertificateRef certificate, CFAbsoluteTime verify
 */
 CFDataRef SecCertificateCopyPublicKeySHA1DigestFromCertificateData(CFAllocatorRef allocator,
                                                                    CFDataRef der_certificate)
-    __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_13_2, __IPHONE_NA, __IPHONE_NA); // Likely incorrect.
+    API_DEPRECATED("deprecated", macos(10.7,10.13.2), ios(NA,NA));
 
 #endif /* SEC_OS_OSX */
 
diff --git a/trust/SecPolicyPriv.h b/trust/SecPolicyPriv.h
index b40920e..9a97f0e 100644
--- a/trust/SecPolicyPriv.h
+++ b/trust/SecPolicyPriv.h
@@ -60,9 +60,9 @@ extern const CFStringRef kSecPolicyAppleQAProfileSigner
 extern const CFStringRef kSecPolicyAppleServerAuthentication
     __OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_8_0);
 extern const CFStringRef kSecPolicyAppleOTAPKISigner
-    __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12, __MAC_10_13_4, __IPHONE_7_0, __IPHONE_11_3);
+    API_DEPRECATED("deprecated", macos(10.12,10.13.4), ios(7.0,11.3));
 extern const CFStringRef kSecPolicyAppleTestOTAPKISigner
-    __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12, __MAC_10_13_4, __IPHONE_7_0, __IPHONE_11_3);
+    API_DEPRECATED("deprecated", macos(10.12,10.13.4), ios(7.0,11.3));
 extern const CFStringRef kSecPolicyAppleIDValidationRecordSigningPolicy
     __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_NA, __MAC_NA, __IPHONE_7_0, __IPHONE_10_0);
 extern const CFStringRef kSecPolicyAppleIDValidationRecordSigning
@@ -938,7 +938,7 @@ SecPolicyRef SecPolicyCreateQAConfigurationProfileSigner(void);
 */
 __nullable CF_RETURNS_RETAINED
 SecPolicyRef SecPolicyCreateOTAPKISigner(void)
-    __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12, __MAC_10_13_4, __IPHONE_7_0, __IPHONE_11_3);
+    API_DEPRECATED("deprecated", macos(10.12,10.13.4), ios(7.0,11.3));
 
 /*!
  @function SecPolicyCreateTestOTAPKISigner
@@ -952,7 +952,7 @@ SecPolicyRef SecPolicyCreateOTAPKISigner(void)
 */
 __nullable CF_RETURNS_RETAINED
 SecPolicyRef SecPolicyCreateTestOTAPKISigner(void)
-    __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12, __MAC_10_13_4, __IPHONE_7_0, __IPHONE_11_3);
+    API_DEPRECATED("deprecated", macos(10.12,10.13.4), ios(7.0,11.3));
 
 /*!
  @function SecPolicyCreateAppleIDValidationRecordSigningPolicy
@@ -1718,7 +1718,7 @@ CFStringRef SecPolicyGetStringForOID(CSSM_OID* oid);
  */
 __nullable CF_RETURNS_RETAINED
 CFArrayRef SecPolicyCreateAppleTimeStampingAndRevocationPolicies(CFTypeRef policyOrArray)
-    __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_13, __IPHONE_NA, __IPHONE_NA);
+    API_DEPRECATED("deprecated", macos(10.10,10.13), ios(NA,NA));
 
 #endif /* TARGET_OS_MAC && !TARGET_OS_IPHONE */
 
diff --git a/trust/SecTrust.h b/trust/SecTrust.h
index 3783409..3926b69 100644
--- a/trust/SecTrust.h
+++ b/trust/SecTrust.h
@@ -168,7 +168,7 @@ extern const CFStringRef kSecTrustRevocationValidUntilDate
 extern const CFStringRef kSecTrustCertificateTransparency
     __OSX_AVAILABLE_STARTING(__MAC_10_11, __IPHONE_9_0);
 extern const CFStringRef kSecTrustCertificateTransparencyWhiteList
-    __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12, __MAC_10_13, __IPHONE_10_0, __IPHONE_11_0);
+    API_DEPRECATED("deprecated", macos(10.12,10.13), ios(10.0,11.0));
 
 #ifdef __BLOCKS__
 /*!
@@ -612,7 +612,7 @@ OSStatus SecTrustSetParameters(SecTrustRef trustRef,
     Note: this function was never applicable to iOS.
  */
 OSStatus SecTrustSetKeychains(SecTrustRef trust, CFTypeRef __nullable keychainOrArray)
-    __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_13, __IPHONE_NA, __IPHONE_NA);
+    API_DEPRECATED("deprecated", macos(10.3,10.13), ios(NA,NA));
 
 /*!
     @function SecTrustGetResult
diff --git a/trust/SecTrustSettingsPriv.h b/trust/SecTrustSettingsPriv.h
index 89feb67..9a4c0aa 100644
--- a/trust/SecTrustSettingsPriv.h
+++ b/trust/SecTrustSettingsPriv.h
@@ -164,7 +164,7 @@ void SecTrustSettingsSetTrustedCertificateForSSLHost(
     SecCertificateRef certificate,
     CFStringRef hostname,
     void (^result)(SecTrustSettingsResult trustResult, CFErrorRef error))
-    __OSX_AVAILABLE_STARTING(__MAC_10_13, __IPHONE_NA);
+    API_AVAILABLE(macos(10.13), ios(NA));
 
 /*
  * Purge the cache of User and Admin Certs
-- 
2.17.2 (Apple Git-113)

